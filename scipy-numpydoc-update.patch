--- scipy-1.8.1/doc/sphinxext/numpydoc/numpydoc.py.orig	2022-05-16 14:36:30.816477500 +0200
+++ scipy-1.8.1/doc/sphinxext/numpydoc/numpydoc.py	2023-01-07 16:22:34.589245962 +0100
@@ -82,10 +82,10 @@ def _is_cite_in_numpydoc_docstring(citat
         if section_node is None:
             return False
 
-    sibling_sections = itertools.chain(section_node.traverse(is_docstring_section,
-                                                             include_self=True,
-                                                             descend=False,
-                                                             siblings=True))
+    sibling_sections = itertools.chain(section_node.findall(is_docstring_section,
+                                                            include_self=True,
+                                                            descend=False,
+                                                            siblings=True))
     for sibling_section in sibling_sections:
         if not sibling_section.children:
             continue
@@ -102,7 +102,7 @@ def _is_cite_in_numpydoc_docstring(citat
 
 def relabel_references(app, doc):
     # Change 'hash-ref' to 'ref' in label text
-    for citation_node in doc.traverse(citation):
+    for citation_node in doc.findall(citation):
         if not _is_cite_in_numpydoc_docstring(citation_node):
             continue
         label_node = citation_node[0]
@@ -120,7 +120,7 @@ def relabel_references(app, doc):
                 return (isinstance(node, pending_xref) and
                         node[0].astext() == '[%s]' % ref_text)
 
-            for xref_node in ref.parent.traverse(matching_pending_xref):
+            for xref_node in ref.parent.findall(matching_pending_xref):
                 xref_node.replace(xref_node[0], Text('[%s]' % new_text))
             ref.replace(ref_text, new_text.copy())
 
@@ -128,10 +128,10 @@ def relabel_references(app, doc):
 def clean_backrefs(app, doc, docname):
     # only::latex directive has resulted in citation backrefs without reference
     known_ref_ids = set()
-    for ref in doc.traverse(reference, descend=True):
+    for ref in doc.findall(reference, descend=True):
         for id_ in ref['ids']:
             known_ref_ids.add(id_)
-    for citation_node in doc.traverse(citation, descend=True):
+    for citation_node in doc.findall(citation, descend=True):
         # remove backrefs to non-existent refs
         citation_node['backrefs'] = [id_ for id_ in citation_node['backrefs']
                                      if id_ in known_ref_ids]
